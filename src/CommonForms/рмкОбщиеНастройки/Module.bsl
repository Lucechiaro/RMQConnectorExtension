#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьИнформациюОПодключаемомМенеджере();
	ПрочитатьЗначенияКонстант();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	ДополнительныеПараметры = Новый Структура("РежимДиалога", РежимДиалогаВыбораФайла.Открытие);
	ПоказатьДиалогВыбораФайла(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Не МенеджерЗагружен Тогда
		
		ПоказатьПредупреждение(, "Нет данных для выгрузки!");
		Возврат;
		
	КонецЕсли;	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимДиалога", РежимДиалогаВыбораФайла.Сохранение);
	ПоказатьДиалогВыбораФайла(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	ОчиститьХранилищеПодключаемогоМенеджера();
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если ПустаяСтрока(ВерсияКомпоненты) Тогда
		
		ПоказатьПредупреждение(, "Укажите версию компоненты!");
		Возврат;
		
	КонецЕсли;	
	
	СохранитьКонстантыНаСервере();
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОбработкаСобытийКоманд

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(ДополнительныеПараметры)
  
  ОООкончаниеВыбораФайла = Новый ОписаниеОповещения("ОкончаниеВыбораФайла", ЭтотОбъект, ДополнительныеПараметры);
  ДиалогСохранения = Новый ДиалогВыбораФайла(ДополнительныеПараметры.РежимДиалога);
  ДиалогСохранения.МножественныйВыбор = Ложь;
  ДиалогСохранения.ПолноеИмяФайла = ИмяФайла;
  ДиалогСохранения.Фильтр = "Внешняя обработка (*.epf)|*.epf";
  
  Если ДополнительныеПараметры.Свойство("ПолноеИмяФайла") Тогда
  	ДиалогСохранения.ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;
  КонецЕсли;
  
  ДиалогСохранения.Показать(ОООкончаниеВыбораФайла);
  
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
  
  Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
    
    ПутьКФайлу = ВыбранныеФайлы[0];
    
    Если ДополнительныеПараметры.РежимДиалога = РежимДиалогаВыбораФайла.Сохранение Тогда
      
      	АдресВременногоХранилища = "";
	    СохранитьМенеджерВФайл(АдресВременногоХранилища);
	    ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	    
	    Если ДвоичныеДанные = Неопределено Тогда
	    	ПоказатьПредупреждение(, "Нет данных для сохранения!");
	    Иначе	 
	    	ДвоичныеДанные.Записать(ПутьКФайлу);
	    КонецЕсли;
      
    Иначе
      
      	СчитатьИнформациюОФайле(ПутьКФайлу);
      	      
    КонецЕсли;  
    
  КонецЕсли; 
  
КонецПроцедуры

&НаКлиенте
Процедура СчитатьИнформациюОФайле(ПутьКФайлу)
	
	Файл 					= Новый Файл(ПутьКФайлу);
	ДополнительныеПараметры = Новый Структура("Файл", Файл);
	ООФайлСуществует 		= Новый ОписаниеОповещения("ОкончаниеПроверкиСуществованияФайла", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ООФайлСуществует);
		
КонецПроцедуры	

&НаКлиенте
Процедура ОкончаниеПроверкиСуществованияФайла(ФайлСуществует, ДополнительныеПараметры) Экспорт
	
	Если ФайлСуществует Тогда
		
		ООПолучениеВремениИзменения = Новый ОписаниеОповещения("ОкончаниеПолученияВремениИзмененияФайла", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.Файл.НачатьПолучениеВремениИзменения(ООПолучениеВремениИзменения);
		
	Иначе
			
		ИмяФайла = "";
		ДатаИзменения = Дата(1, 1, 1);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПолученияВремениИзмененияФайла(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ИмяФайла 		= ДополнительныеПараметры.Файл.Имя;
	ДатаИзменения 	= ВремяИзменения;
	
	ИнформацияОФайле = ПустаяСтруктураИнформации();
    ЗаполнитьЗначенияСвойств(ИнформацияОФайле, ЭтотОбъект);
    ДанныеФайла = Новый ДвоичныеДанные(ДополнительныеПараметры.Файл.ПолноеИмя);
    АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла);
    ПоместитьФайлВКонстанту(АдресВременногоХранилища, ИнформацияОФайле);
	
КонецПроцедуры

#КонецОбласти


#Область ЧтениеИЗаписьДанных

&НаСервере
Процедура ПрочитатьЗначенияКонстант()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДнейХраненияСообщений = Константы.рмкДнейХраненияСообщений.Получить();
	РазрешенаРаботаВКопииБазы = Константы.рмкРазрешенаРаботаВКопииБазы.Получить();
	
	ВерсияКомпоненты = Константы.рмкВерсияКомпоненты.Получить();
	ВерсииКомпоненты = рмкОбщегоНазначенияПовтИсп.ПолучитьДоступныеВерсииКомпонентыRQM();
	Элементы.ВерсияКомпоненты.СписокВыбора.ЗагрузитьЗначения(ВерсииКомпоненты);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтруктураИнформации()
	
	СтруктураИнформации = Новый Структура;
	СтруктураИнформации.Вставить("ДатаИзменения");
	СтруктураИнформации.Вставить("ИмяФайла");
	СтруктураИнформации.Вставить("Загрузил");
	СтруктураИнформации.Вставить("ДатаЗагрузки");
	
	Возврат СтруктураИнформации;
	
КонецФункции	

&НаСервере
Процедура ПрочитатьИнформациюОПодключаемомМенеджере()
	
	СтруктураИнформации = ПустаяСтруктураИнформации();
		
	УстановитьПривилегированныйРежим(Истина);
	ИнформацияСтрокой = Константы.рмкИнформацияОПодключаемомМенеджереКонвертации.Получить();
	
	//@skip-check empty-except-statement
	Попытка
		
		Если ИнформацияСтрокой <> Неопределено Тогда
			
			ДесериализованнаяСтруктура = рмкОбщегоНазначения.ДесериализоватьОбъект(ИнформацияСтрокой);
			ЗаполнитьЗначенияСвойств(СтруктураИнформации, ДесериализованнаяСтруктура);
			СтруктураИнформации.ДатаЗагрузки 	= ПрочитатьДатуJSON(ДесериализованнаяСтруктура.ДатаЗагрузки, ФорматДатыJSON.iso);
			СтруктураИнформации.ДатаИзменения 	= ПрочитатьДатуJSON(ДесериализованнаяСтруктура.ДатаИзменения, ФорматДатыJSON.iso);
			
		КонецЕсли;	
		
	Исключение

	КонецПопытки;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураИнформации);
	МенеджерЗагружен = рмкОбщегоНазначения.ПодключаемыйМенеджерКонвертацииЗагружен();
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьИнформациюОПодключаемомМенеджере(Параметры)
	
	СтруктураИнформации = ПустаяСтруктураИнформации();
	ЗаполнитьЗначенияСвойств(СтруктураИнформации, 	Параметры);
	СтруктураИнформации.Вставить("Загрузил", 		рмкОбщегоНазначенияПереопределяемый.ТекущийПользователь());
	СтруктураИнформации.Вставить("ДатаЗагрузки",	ТекущаяДатаСеанса());
	
	ИнформацияСтрокой = рмкОбщегоНазначения.СериализоватьОбъект(СтруктураИнформации);
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.рмкИнформацияОПодключаемомМенеджереКонвертации.Установить(ИнформацияСтрокой);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураИнформации);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьХранилищеПодключаемогоМенеджера() 
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.рмкХранилищеПодключаемогоМенеджераКонвертации.Установить(Неопределено);
	
	Информация = Новый Структура;
	ЗафиксироватьИнформациюОПодключаемомМенеджере(Информация);
	
КонецПроцедуры	

&НаСервере
Процедура ПоместитьФайлВКонстанту(АдресВременногоХранилища, ИнформацияОФайле)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.рмкХранилищеПодключаемогоМенеджераКонвертации.Установить(Новый ХранилищеЗначения(ДвоичныеДанные));
	МенеджерЗагружен = Истина;
	
	ЗафиксироватьИнформациюОПодключаемомМенеджере(ИнформацияОФайле);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьМенеджерВФайл(АдресВременногоХранилища) 
	
	УстановитьПривилегированныйРежим(Истина);
	ДвоичныеДанные = Константы.рмкХранилищеПодключаемогоМенеджераКонвертации.Получить().Получить();
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
КонецПроцедуры	

#КонецОбласти

&НаСервере
Процедура СохранитьКонстантыНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.рмкДнейХраненияСообщений.Установить(ДнейХраненияСообщений);
	Константы.рмкРазрешенаРаботаВКопииБазы.Установить(РазрешенаРаботаВКопииБазы);
	Константы.рмкВерсияКомпоненты.Установить(ВерсияКомпоненты);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти


