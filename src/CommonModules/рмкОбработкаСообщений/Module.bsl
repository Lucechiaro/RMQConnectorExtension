#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

Процедура ПриЗаписиОбъектаРепликации(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ОбменДанными.Загрузка Или Источник.ДополнительныеСвойства.Свойство("рмкНеРегистрироватьКОбмену") Тогда
		Возврат;
	КонецЕсли;	
	
	Если рмкОбщегоНазначенияПереопределяемый.ОбъектИсключенИзРепликации(Источник.Метаданные()) Тогда
		Возврат;
	КонецЕсли;		
	
	Для Каждого ТочкаПодключения Из ТочкиПодключенияДляОбъекта(Источник) Цикл
		СоздатьИсходящееСообщение(Источник, ТочкаПодключения);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПриЗаписиРегистраРепликации(Источник, Отказ, Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ОбменДанными.Загрузка Или Источник.ДополнительныеСвойства.Свойство("рмкНеРегистрироватьКОбмену") Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ТочкаПодключения Из ТочкиПодключенияДляОбъекта(Источник) Цикл
		СоздатьИсходящееСообщение(Источник, ТочкаПодключения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

&Вместо("ВыполнитьРегламентОтправкиИсходящихСообщений")
Процедура рмкВыполнитьРегламентОтправкиИсходящихСообщений() Экспорт
	
	рмкОбщегоНазначенияПереопределяемый.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.рмкОтправкаИсходящихСообщений);
	
	ТаблицаСообщений = ПолучитьСообщенияДляОтправки();
	ОтправитьСообщения(ТаблицаСообщений);
	
КонецПроцедуры

&Вместо("ПолучитьСообщенияИзОчередей")
Процедура рмкПолучитьСообщенияИзОчередей(СлушателиОчередей = Неопределено) Экспорт
	
	рмкОбщегоНазначенияПереопределяемый.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.рмкПолучениеСообщенийИзОчередей);
	
	Если СлушателиОчередей = Неопределено Тогда
		СлушателиОчередей = ПолучитьАктивныеСлушателиОчередей();
	КонецЕсли;	
	
	Коннектор = Обработки.рмкКоннектор.Создать();
	Коннектор.Инициализировать();
	
	Для Каждого СлушательОчереди Из СлушателиОчередей Цикл
		
		Попытка
			
			// TODO переработать обработку исключений. Обрабатывать отдельно исключение при подключении
			// и отдельно исключение при получении сообщений из очереди
			Коннектор.Подключиться(СлушательОчереди.ВиртуальныйХост);
				
		Исключение

			ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(рмкОбщегоНазначения.ПрефиксСобытияЖурналаРегистрации() + "Ошибка подключения к очереди", 
										УровеньЖурналаРегистрации.Ошибка, , СлушательОчереди, ОписаниеОшибки);
			ИмяОчереди = рмкОбщегоНазначенияПереопределяемый.ЗначениеРеквизитаОбъекта(СлушательОчереди, "ИмяОчереди");
			ВызватьИсключение СтрШаблон("Не удалось подключиться к очереди %1", ИмяОчереди);
			
		КонецПопытки;
		
		Коннектор.ПолучитьСообщенияИзОчереди(СлушательОчереди);
		
	КонецЦикла;
	 
	Коннектор.Закрыть();
	
КонецПроцедуры

&Вместо("ВыполнитьРегламентОбработкиВходящихСообщений")
Процедура рмкВыполнитьРегламентОбработкиВходящихСообщений() Экспорт
	
	ВходящиеСообщения = ПолучитьВходящиеСообщения();
	ОбработатьВходящиеСообщения(ВходящиеСообщения);
	
КонецПроцедуры

&Вместо("ОчиститьУстаревшиеСообщения")
Процедура рмкОчиститьУстаревшиеСообщения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоДнейХранения = Константы.рмкДнейХраненияСообщений.Получить();
	
	Если КоличествоДнейХранения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СекундВСутках = 86400;
	ДатаУстареванияСообщений = ТекущаяДатаСеанса() - КоличествоДнейХранения * СекундВСутках;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рмкВходящиеСообщения.Ссылка Как Сообщение
	|ИЗ
	|	Справочник.рмкВходящиеСообщения КАК рмкВходящиеСообщения
	|ГДЕ
	|	рмкВходящиеСообщения.ДатаПолучения < &ДатаУстареванияСообщений
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	рмкИсходящиеСообщения.Ссылка
	|ИЗ
	|	Справочник.рмкИсходящиеСообщения КАК рмкИсходящиеСообщения
	|ГДЕ
	|	рмкИсходящиеСообщения.ДатаСоздания < &ДатаУстареванияСообщений";
	Запрос.УстановитьПараметр("ДатаУстареванияСообщений", ДатаУстареванияСообщений);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УдалитьСообщениеОбмена(Выборка.Сообщение);
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти 

Процедура ОбработатьВходящиеСообщения(ВходящиеСообщения) Экспорт
	
	МенеджерыКонвертации = СоздатьМенеджерыКонвертации();

	Для Каждого Сообщение Из ВходящиеСообщения Цикл
				
		Если Сообщение.МенеджерКонвертации.Пустая() Или ПустаяСтрока(Сообщение.ИмяМетодаКонвертации) Тогда
			Продолжить;
		КонецЕсли;	
				
		МенеджерКонвертации = ПолучитьМенеджерКонвертации(МенеджерыКонвертации, Сообщение.МенеджерКонвертации);
		ДанныеДляРаспаковки = Сообщение.Данные.Получить();
		
		Если ДанныеДляРаспаковки = Неопределено Тогда
			
			ЗафиксироватьСтатусСообщения(Сообщение, "Ошибка", "Сообщение не содержит данные");
			Продолжить;
			
		КонецЕсли;	
		
		КонтейнерСообщения = рмкОбщегоНазначения.ДесериализоватьОбъект(ДанныеДляРаспаковки);

		Попытка 
			
			МенеджерКонвертации.ВыполнитьМетод(Сообщение.ИмяМетодаКонвертации, КонтейнерСообщения);
			ЗафиксироватьСтатусСообщения(Сообщение, "Обработано");
			
		Исключение
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗафиксироватьСтатусСообщения(Сообщение, "Ошибка", ПодробноеПредставлениеОшибки);
			
		КонецПопытки;	
			
	КонецЦикла;	
	
КонецПроцедуры

// таблица сообщений должна содержать колонки
// сообщение (ссылка), сервер, виртуальный хост, универсальная дата создания
Процедура ОтправитьСообщения(ТаблицаСообщений) Экспорт
	
	ТаблицаСообщений.Сортировать("Сервер,ВиртуальныйХост,УниверсальнаяДатаСоздания");
	ТаблицаХостов = ТаблицаСообщений.Скопировать();
	ТаблицаХостов.Свернуть("Сервер,ВиртуальныйХост");
	Отбор = Новый Структура("Сервер,ВиртуальныйХост");
	
	Коннектор = Обработки.рмкКоннектор.Создать();
	Коннектор.Инициализировать();
	
	Для Каждого СтрокаХоста Из ТаблицаХостов Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаХоста);
		СообщенияКОтправке = ТаблицаСообщений.НайтиСтроки(Отбор);
		
		Попытка
			
			Коннектор.Подключиться(СтрокаХоста.ВиртуальныйХост);
			ПодключениеУспешно = Истина;
			
		Исключение
			
			ПодключениеУспешно = Ложь;
			ОписаниеОшибки = СтрШаблон("Не удалось подключиться к виртуальному хосту ""%1""", Строка(СтрокаХоста.ВиртуальныйХост));
			ЗаписьЖурналаРегистрации(рмкОбщегоНазначения.ПрефиксСобытияЖурналаРегистрации() + "Ошибка подключения к виртуальному хосту", 
										УровеньЖурналаРегистрации.Ошибка, , СтрокаХоста.ВиртуальныйХост, ОписаниеОшибки); 
			
		КонецПопытки;	
		
		Если ПодключениеУспешно Тогда
		
			Для Каждого СтрокаСообщения Из СообщенияКОтправке Цикл
				
				Попытка
					Коннектор.ОтправитьСообщение(СтрокаСообщения.Сообщение);
				Исключение
					
					ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗафиксироватьСтатусСообщения(СтрокаСообщения.Сообщение, "Ошибка", ПодробноеПредставлениеОшибки);
					
				КонецПопытки;	
				
			КонецЦикла;	
		
		КонецЕсли;
		
	КонецЦикла;	
	
	Коннектор.Закрыть();
	
КонецПроцедуры

Процедура СоздатьИсходящееСообщение(ОбъектДляСериализации, ТочкаПодключения) Экспорт
	
	ID = Строка(Новый УникальныйИдентификатор);
	РеквизитыТочки = рмкОбщегоНазначенияПереопределяемый.ЗначенияРеквизитовОбъекта(ТочкаПодключения, "Сервер,ВиртуальныйХост");
	
	СообщениеОбъект = Справочники.рмкИсходящиеСообщения.СоздатьЭлемент();
	СообщениеОбъект.ТекущийСтатус 		= ПредопределенноеЗначение("Перечисление.рмкСтатусыСообщений.Создано");
	СообщениеОбъект.Сервер 				= РеквизитыТочки.Сервер;
	СообщениеОбъект.ТочкаПодключения 	= ТочкаПодключения;
	СообщениеОбъект.ВиртуальныйХост 	= РеквизитыТочки.ВиртуальныйХост;
	СообщениеОбъект.Код 				= ID;
	СообщениеОбъект.ПредставлениеДанных = Строка(ОбъектДляСериализации);
	СообщениеОбъект.ПредставлениеМетаданных = рмкОбщегоНазначения.ПолучитьПредставлениеМетаданныхОбъекта(ОбъектДляСериализации);
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("ID", ID);
	ДанныеСообщения.Вставить("InstanceID", рмкОбщегоНазначенияПереопределяемый.ИдентификаторОтправителя());
	
	Если ТочкаПодключения.ТипИнформации = ПредопределенноеЗначение("Перечисление.рмкТипыПередаваемойИнформации.Данные") Тогда
		
		КонтекстСообщения = Новый Структура("ОбъектДляСериализации,Сообщение,ТочкаПодключения", ОбъектДляСериализации, СообщениеОбъект, ТочкаПодключения);
		ПоместитьОбъектБазыДанныхВДанныеСообщения(ДанныеСообщения, КонтекстСообщения);
		
	Иначе
		
		ДанныеСообщения.Вставить("Content", ОбъектДляСериализации);
	
	КонецЕсли;	
		
	КонтейнерСообщения 		= рмкОбщегоНазначения.СериализоватьОбъект(ДанныеСообщения);
	СообщениеОбъект.Данные 	= Новый ХранилищеЗначения(КонтейнерСообщения);
	СообщениеОбъект.Записать();
	
	ЗафиксироватьСтатусСообщения(СообщениеОбъект.Ссылка, "Создано");
	
КонецПроцедуры	

Процедура СоздатьВходящееСообщение(СлушательОчереди, ПрочитанноеСообщение) Экспорт
	
	СписокРеквизитов = "Сервер,ВиртуальныйХост,ИмяОчереди,МенеджерКонвертации,ИмяМетодаКонвертации";
	РеквизитыСлушателя = рмкОбщегоНазначенияПереопределяемый.ЗначенияРеквизитовОбъекта(СлушательОчереди, СписокРеквизитов);
	Статус = ПредопределенноеЗначение("Перечисление.рмкСтатусыСообщений.Получено");
	
	СообщениеОбъект = Справочники.рмкВходящиеСообщения.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(СообщениеОбъект, РеквизитыСлушателя);
	СообщениеОбъект.Данные 			= Новый ХранилищеЗначения(ПрочитанноеСообщение);
	СообщениеОбъект.ТекущийСтатус 	= Статус;
	СообщениеОбъект.ДатаПолучения 	= ТекущаяДатаСеанса();
		
	//@skip-check empty-except-statement
	Попытка
		
		КонтейнерСообщения = рмкОбщегоНазначения.ДесериализоватьОбъект(ПрочитанноеСообщение);
		
		Если ТипЗнч(КонтейнерСообщения) = Тип("Структура") Тогда
			
			КонтейнерСообщения.Свойство("MetadataPresentation", СообщениеОбъект.ПредставлениеМетаданных);
			КонтейнерСообщения.Свойство("DataPresentation", СообщениеОбъект.ПредставлениеДанных);
			
		КонецЕсли;	
		
	Исключение
		
	КонецПопытки;		
	
	СообщениеОбъект.Записать();
	
	ЗафиксироватьСтатусСообщения(СообщениеОбъект.Ссылка, Статус, "", Истина);
	
КонецПроцедуры

Процедура ЗафиксироватьСтатусСообщения(Сообщение, СтатусСтрокой, Информация = "", ЗаписыватьСообщение = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СтатусСтрокой) = Тип("Строка") Тогда
		Статус = ПредопределенноеЗначение("Перечисление.рмкСтатусыСообщений." + СтатусСтрокой);
	Иначе
		Статус = СтатусСтрокой;
	КонецЕсли;			
	
	Если ЗаписыватьСообщение = Истина Тогда
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		СообщениеОбъект.ТекущийСтатус = Статус;
		СообщениеОбъект.Записать();
		
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.рмкСтатусыСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период	 		= ТекущаяДатаСеанса();
	МенеджерЗаписи.Сообщение 		= Сообщение;
	МенеджерЗаписи.Идентификатор 	= Новый УникальныйИдентификатор;
	МенеджерЗаписи.Статус 			= Статус;
	МенеджерЗаписи.Информация 		= Информация;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ПолучитьМенеджерКонвертации(Менеджеры = Неопределено, ТипМенеджера) Экспорт
	
	Если Менеджеры = Неопределено Тогда
		Менеджеры = СоздатьМенеджерыКонвертации();
	КонецЕсли;	
	
	МенеджерКонвертации = Менеджеры.Получить(ТипМенеджера);
	
	Если МенеджерКонвертации = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не инициализирован менеджер конвертации %1", ТипМенеджера);
	КонецЕсли;
	
	Возврат МенеджерКонвертации;
	
КонецФункции	

#КонецОбласти 
	
#Область СлужебныеПроцедурыИФункции

Функция ТочкиПодключенияДляОбъекта(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолноеИмяМетаданных = Источник.Метаданные().ПолноеИмя();
	ТочкиПодключения 	= Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рмкТочкиПодключения.Ссылка Как ТочкаПодключения
	|ИЗ
	|	Справочник.рмкТочкиПодключения.МетаданныеДляРепликации КАК рмкТочкиПодключенияМетаданныеДляРепликации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.рмкТочкиПодключения КАК рмкТочкиПодключения
	|		ПО рмкТочкиПодключенияМетаданныеДляРепликации.Ссылка = рмкТочкиПодключения.Ссылка
	|ГДЕ
	|	рмкТочкиПодключения.Активна
	|	И рмкТочкиПодключенияМетаданныеДляРепликации.ПолноеИмя = &ПолноеИмяМетаданных
	|	И рмкТочкиПодключения.ТипИнформации = ЗНАЧЕНИЕ(Перечисление.рмкТипыПередаваемойИнформации.Данные)";
	Запрос.УстановитьПараметр("ПолноеИмяМетаданных", ПолноеИмяМетаданных);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТочкиПодключения.Добавить(Выборка.ТочкаПодключения);
	КонецЦикла;	
	
	Возврат ТочкиПодключения;
	
КонецФункции

Функция ПолучитьАктивныеСлушателиОчередей()
	
	СлушателиОчередей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рмкСлушателиОчередей.Ссылка Как Слушатель
	|ИЗ
	|	Справочник.рмкСлушателиОчередей КАК рмкСлушателиОчередей
	|ГДЕ
	|	рмкСлушателиОчередей.Активен
	|	И НЕ рмкСлушателиОчередей.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СлушателиОчередей.Добавить(Выборка.Слушатель);
	КонецЦикла;	
	
	Возврат СлушателиОчередей;
	
КонецФункции

Функция ПолучитьВходящиеСообщения()
	
	ВходящиеСообщения = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рмкВходящиеСообщения.Ссылка
	|ИЗ
	|	Справочник.рмкВходящиеСообщения КАК рмкВходящиеСообщения
	|ГДЕ
	|	рмкВходящиеСообщения.ТекущийСтатус <> Значение(Перечисление.рмкСтатусыСообщений.Обработано)
	|	И НЕ рмкВходящиеСообщения.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВходящиеСообщения.Добавить(Выборка.Ссылка);
	КонецЦикла;	
		
	Возврат ВходящиеСообщения;
	
КонецФункции

Функция ПоместитьОбъектБазыДанныхВДанныеСообщения(ДанныеСообщения, КонтекстСообщения) 
	
	ДанныеСообщения.Вставить("MetadataPresentation", 	КонтекстСообщения.Сообщение.ПредставлениеМетаданных);
	ДанныеСообщения.Вставить("DataPresentation", 		КонтекстСообщения.Сообщение.ПредставлениеДанных);
				
	МенеджерыКонвертации 	= СоздатьМенеджерыКонвертации();
	МенеджерКонвертации 	= МенеджерыКонвертации.Получить(КонтекстСообщения.ТочкаПодключения.МенеджерКонвертации);
	ПараметрыКонвертации 	= Новый Структура("ОбъектДляСериализации, ДанныеСообщения", КонтекстСообщения.ОбъектДляСериализации, ДанныеСообщения);
	
	Если ВыгружатьДвиженияДокумента(КонтекстСообщения.ОбъектДляСериализации, КонтекстСообщения.ТочкаПодключения) Тогда
		ПараметрыКонвертации.Вставить("UnloadRegisterRecords");
	КонецЕсли;	

	МенеджерКонвертации.ВыполнитьМетод(КонтекстСообщения.ТочкаПодключения.ИмяМетодаКонвертации, ПараметрыКонвертации);

	Возврат ДанныеСообщения;
	
КонецФункции

Функция ПолучитьСообщенияДляОтправки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рмкИсходящиеСообщения.Ссылка Как Сообщение,
	|	рмкИсходящиеСообщения.Сервер,
	|	рмкИсходящиеСообщения.ВиртуальныйХост КАК ВиртуальныйХост,
	|	рмкИсходящиеСообщения.УниверсальнаяДатаСоздания КАК УниверсальнаяДатаСоздания
	|ИЗ
	|	Справочник.рмкИсходящиеСообщения КАК рмкИсходящиеСообщения
	|ГДЕ
	|	рмкИсходящиеСообщения.ТекущийСтатус = Значение(Перечисление.рмкСтатусыСообщений.Создано)
	|	И НЕ рмкИсходящиеСообщения.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВиртуальныйХост,
	|	УниверсальнаяДатаСоздания";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция ВыгружатьДвиженияДокумента(ОбъектДляСериализации, ТочкаПодключения) 
	
	Если Не рмкОбщегоНазначения.ЭтоДокумент(ОбъектДляСериализации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	1 КАК Поле1
	               |ИЗ
	               |	Справочник.рмкТочкиПодключения.МетаданныеДляРепликации КАК рмкТочкиПодключенияМетаданныеДляРепликации
	               |ГДЕ
	               |	рмкТочкиПодключенияМетаданныеДляРепликации.Ссылка = &ТочкаПодключения
	               |	И рмкТочкиПодключенияМетаданныеДляРепликации.ПолноеИмя = &ПолноеИмяМетаданных
	               |	И рмкТочкиПодключенияМетаданныеДляРепликации.ВыгружатьСДвижениями";
	Запрос.УстановитьПараметр("ТочкаПодключения", 		ТочкаПодключения);
	Запрос.УстановитьПараметр("ПолноеИмяМетаданных", 	ОбъектДляСериализации.Метаданные().ПолноеИмя());
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();	
	
КонецФункции	

#Область ПодключениеМенеджеровКонвертации

Процедура ПодключитьВнешнююОбработкуМенеджераКонвертации()
	
	ДвоичныеДанныеОбработки = Константы.рмкХранилищеПодключаемогоМенеджераКонвертации.Получить().Получить();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанныеОбработки.Записать(ИмяВременногоФайла);
	АдресОбработки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
	УдалитьФайлы(ИмяВременногоФайла);
	ВнешниеОбработки.Подключить(АдресОбработки, "рмкМенеджерКонвертации", Ложь);
	
КонецПроцедуры

Функция СоздатьМенеджерыКонвертации()
	
	Менеджеры = Новый Соответствие;
	Менеджеры.Вставить(ПредопределенноеЗначение("Перечисление.рмкМенеджерыКонвертации.МенеджерXDTO"), Обработки.рмкМенеджерКонвертацииXDTO.Создать());
	Менеджеры.Вставить(ПредопределенноеЗначение("Перечисление.рмкМенеджерыКонвертации.ВстроенныйМенеджер"), Обработки.рмкМенеджерКонвертации.Создать());
	
	Если рмкОбщегоНазначения.ПодключаемыйМенеджерКонвертацииЗагружен() Тогда
	
		ПодключитьВнешнююОбработкуМенеджераКонвертации();
		Менеджеры.Вставить(ПредопределенноеЗначение("Перечисление.рмкМенеджерыКонвертации.ПодключаемыйМенеджер"), ВнешниеОбработки.Создать("рмкМенеджерКонвертации"));
		
	КонецЕсли;
	
	Возврат Менеджеры;
	
КонецФункции

Процедура УдалитьСообщениеОбмена(Сообщение)
	
	СообщениеОбъект = Сообщение.ПолучитьОбъект();
	СообщениеОбъект.Удалить();
	// регистр сведений "рмкСтатусыСообщений" очистится автоматически, так измерение "Сообщение" - ведущее
		
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 